<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Tutorial1</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.ReadFile">
<summary>
 IDisposable を実装する型
</summary>
</member>
<member name="T:Tutorial.BoilerPlateForForm">

</member>
<member name="T:Tutorial.OData">

</member>
<member name="T:Tutorial.DatabaseAccess">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.Events">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.ParallelArrayProgramming">

</member>
<member name="P:Tutorial.UnitsOfMeasure.mile.asMeter">
<summary>
 マイルからメートルへの変換係数: メートルは SI.UnitNames で定義されています
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.UnitsOfMeasure">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.PatternMatching.Employee">
<summary>
 3 種類の社員の判別共用体を定義します
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.PatternMatching.Person">
<summary>
 個人の姓および名のレコード
</summary>
</member>
<member name="M:Tutorial.PatternMatching.findDaveWithOpenPosition(Microsoft.FSharp.Collections.FSharpList{Tutorial.PatternMatching.Employee})">
<summary>
 名前が &quot;Dave&quot; で、レポートのないすべてのマネージャー/役員を検索します
</summary>
</member>
<member name="M:Tutorial.PatternMatching.countReports(Tutorial.PatternMatching.Employee)">
<summary>
 管理階層構造の中で、ある社員の下にいる全員の数 (社員自身を含む) を数えます
</summary>
</member>
<member name="T:Tutorial.PatternMatching">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Tutorial.OptionTypes.ShippingCalculator.customerShippingZone(Tutorial.OptionTypes.Customer)">
<summary>
 顧客の郵便番号に対応する出荷ゾーンを返します
 顧客には郵便番号がまだ割り当てられていないか、郵便番号が無効です
</summary>
</member>
<member name="T:Tutorial.OptionTypes.ShippingCalculator">
<summary>
 顧客の郵便番号の出荷ゾーンを計算する抽象クラスです。
 &apos;getState&apos; および &apos;getShippingZone&apos; 抽象メソッドの実装が指定されています。
</summary>
</member>
<member name="">

</member>
<member name="T:Tutorial.OptionTypes.Customer">
<summary>
 オプション値とは、&apos;Some&apos; または &apos;None&apos; が指定されたあらゆる種類の値です。
 F# コードで広く使用され、他の多くの言語で null 参照が使用される
 ケースを表します。
</summary>
</member>
<member name="T:Tutorial.OptionTypes">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.UnionTypes.Rank.Value">
<summary>
 2 ～ 10 の札のランクを表します
</summary>
</member>
<member name="">

</member>
<member name="T:Tutorial.UnionTypes.Rank">
<summary>
 トランプのランクを表します
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.UnionTypes.Suit">
<summary>
 トランプのスートを表します
</summary>
</member>
<member name="">

</member>
<member name="M:Tutorial.UnionTypes.showCard(Tutorial.UnionTypes.Card)">
<summary>
 &apos;カード&apos; オブジェクトを文字列に変換します
</summary>
</member>
<member name="P:Tutorial.UnionTypes.fullDeck">
<summary>
 デッキ上のすべてのカードを表すリストを返します
</summary>
</member>
<member name="T:Tutorial.UnionTypes">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Tutorial.RecordTypes.showCard(Tutorial.RecordTypes.ContactCard)">
<summary>
 &apos;ContactCard&apos; オブジェクトを文字列に変換します
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.RecordTypes">

</member>
<member name="">

</member>
<member name="M:Tutorial.RecursiveFunctions.sumListTailRecHelper(System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32})">
<summary>
 ヘルパー関数を結果アキュムレータと共に使用し、関数を末尾再帰にします
</summary>
</member>
<member name="M:Tutorial.RecursiveFunctions.sumList(Microsoft.FSharp.Collections.FSharpList{System.Int32})">
<summary>
 再帰関数を使用し、整数のリストの合計を計算します。
</summary>
</member>
<member name="M:Tutorial.RecursiveFunctions.greatestCommonFactor(System.Int32,System.Int32)">
<summary>
 2 つの整数の最大公約数を計算します。
</summary>
</member>
<member name="M:Tutorial.RecursiveFunctions.factorial(System.Int32)">
<summary>
 整数の階乗を計算します。&apos;let rec&apos; を使用し、再帰関数を定義します
</summary>
</member>
<member name="T:Tutorial.RecursiveFunctions">

</member>
<member name="">

</member>
<member name="M:Tutorial.Sequences.randomWalk(System.Double)">
<summary>
 無限シーケンス (ランダム ウォーク)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Tutorial.Sequences.seq3">
<summary>
 &quot;hello&quot; と &quot;world&quot; のみを含む、もう 1 つの配列
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Tutorial.Sequences.seq1``1">
<summary>
 空のシーケンスです
</summary>
</member>
<member name="T:Tutorial.Sequences">

</member>
<member name="P:Tutorial.Arrays.sumOfLengthsOfWords">
<summary>
 &apos;h&apos; で始まる単語の長さの合計を計算します
</summary>
</member>
<member name="P:Tutorial.Arrays.evenNumbersSlice">
<summary>
 スライス表記法を使用してサブ配列を抽出します
</summary>
</member>
<member name="P:Tutorial.Arrays.evenNumbers">
<summary>
 インデックスによって初期化され、0 ～ 2000 の間の偶数を含む配列
</summary>
</member>
<member name="P:Tutorial.Arrays.array4">
<summary>
 &quot;hello&quot; と &quot;world&quot; のみを含む配列
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Tutorial.Arrays.array1``1">
<summary>
 空の配列です
</summary>
</member>
<member name="T:Tutorial.Arrays">

</member>
<member name="F:Tutorial.DefiningGenericClasses.StateTracker`1.states">
<summary>
 状態を配列に保存します
</summary>
</member>
<member name="P:Tutorial.DefiningGenericClasses.StateTracker`1.History">
<summary>
 状態の履歴のリスト全体を取得します
</summary>
</member>
<member name="P:Tutorial.DefiningGenericClasses.StateTracker`1.Current">
<summary>
 最新の状態を取得します
</summary>
</member>
<member name="M:Tutorial.DefiningGenericClasses.StateTracker`1.UpdateState(`0)">
<summary>
 状態のリストに新しい要素を追加します
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Tutorial.DefiningGenericClasses.tracker">
<summary>
 状態トラッカー クラスの &apos;int&apos; インスタンス。型パラメーターは推論されていることに注意してください。
</summary>
</member>
<member name="T:Tutorial.DefiningGenericClasses">

</member>
<member name="F:Tutorial.DefiningClasses.Vector2D.length">
<summary>
 オブジェクトの構築時に計算されるベクター長です
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.DefiningClasses.Vector2D">
<summary>
 クラスのコンストラクターは、dx と dy の 2 つの引数を取ります。どちらも浮動小数点型です。
</summary>
</member>
<member name="P:Tutorial.DefiningClasses.vector2">
<summary>
 元のオブジェクトを変更せずに、新しく調節されたベクター オブジェクトを取得します
</summary>
</member>
<member name="P:Tutorial.DefiningClasses.vector1">
<summary>
 Vector2D クラスのインスタンス
</summary>
</member>
<member name="T:Tutorial.DefiningClasses">

</member>
<member name="M:Tutorial.Lists.sumOfSquaresUpTo``1(``0)">
<summary>
 3 で割り切れる数の二乗和を計算します。
</summary>
</member>
<member name="P:Tutorial.Lists.squares">
<summary>
 パイプライン演算子を使用して List.map に引数を渡し、numberList の数を二乗します    
</summary>
</member>
<member name="P:Tutorial.Lists.blackSquares">
<summary>
 チェス盤の黒いマス目の座標のタプルを含むリスト。
</summary>
</member>
<member name="P:Tutorial.Lists.daysList">
<summary>
 1 ～ 1000 の整数のリスト
 1 年のすべての日を含むリスト
</summary>
</member>
<member name="P:Tutorial.Lists.numberList">
<summary>
 冒頭に &apos;42&apos; が追加された新しいリスト
</summary>
</member>
<member name="P:Tutorial.Lists.list3">
<summary>
 3 つの要素のリスト
</summary>
</member>
<member name="P:Tutorial.Lists.list2">
<summary>
 空白のリスト
</summary>
</member>
<member name="">

</member>
<member name="T:Tutorial.Lists">

</member>
<member name="P:Tutorial.Tuples.tuple2">
<summary>
 整数、文字列、および倍精度浮動小数点数で構成されるタプル
</summary>
</member>
<member name="M:Tutorial.Tuples.swapElems``2(``0,``1)">
<summary>
 タプルの 2 つの値の順序を入れ替える関数。
 クイック ヒントに、関数はジェネリック型であることが推論されると示されます。
</summary>
</member>
<member name="P:Tutorial.Tuples.tuple1">
<summary>
 整数のシンプルなタプルです
</summary>
</member>
<member name="T:Tutorial.Tuples">

</member>
<member name="P:Tutorial.StringManipulation.substring">
<summary>
 結果の文字列の 1 つから最初の 7 文字を取得して作成された文字列です
</summary>
</member>
<member name="">

</member>
<member name="P:Tutorial.StringManipulation.string4">
<summary>
 三重引用符で囲んだ文字列リテラルを使用し
</summary>
</member>
<member name="P:Tutorial.StringManipulation.string3">
<summary>
 @ を使用し、verbatim 文字列リテラルを作成します
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.StringManipulation">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.SomeBooleanValues">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Tutorial.BasicFunctions.result1">
<summary>
 関数を適用します。&apos;let&apos; を使用し、関数の戻り値の結果に名前を付けます。
 変数の型は、関数の戻り値の型から推論されます。
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.BasicFunctions">

</member>
<member name="P:Tutorial.Integers.sampleTableOfSquares">
<summary>
 0 ～ 99 のすべての数値とその平方を含むすべてのタプルのリストです
</summary>
</member>
<member name="P:Tutorial.Integers.sampleNumbers">
<summary>
 0 ～ 99 の数値のリストです
</summary>
</member>
<member name="P:Tutorial.Integers.sampleInteger2">
<summary>
 最初の整数から演算を行います
</summary>
</member>
<member name="">

</member>
<member name="T:Tutorial.Integers">

</member>
<member name="T:Tutorial">

</member>
</members>
</doc>
